// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://oyljfpeeckxgfrqwsebk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im95bGpmcGVlY2t4Z2ZycXdzZWJrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE1MTQxODksImV4cCI6MjA2NzA5MDE4OX0.czWNSZ4vSocds-zInvEAiSS6XcjCmorWwTFsoIcRJnM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// إنشاء client Supabase مع إعدادات محسنة
const supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    headers: {
      'X-Client-Info': 'shifa-care-ai-insights'
    }
  },
  db: {
    schema: 'public'
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
});

// نظام مصادقة محلي كحل بديل
class LocalAuth {
  private users: any[] = [];
  private currentUser: any = null;

  constructor() {
    this.users = this.loadUsers();
    this.currentUser = this.loadCurrentUser();
  }

  private loadUsers() {
    const users = localStorage.getItem('shifa_users');
    if (users) {
      return JSON.parse(users);
    }
    
    const defaultUsers = [
      {
        id: '1',
        email: 'admin@shifacare.com',
        password: 'admin123',
        full_name: 'مدير النظام',
        role: 'admin',
        permissions: {
          manage_users: true,
          manage_patients: true,
          manage_sessions: true,
          view_reports: true,
          manage_settings: true,
          manage_finances: true,
          manage_facility: true,
          manage_rooms: true
        },
        is_active: true,
        created_at: new Date().toISOString()
      },
      {
        id: '2',
        email: 'test@shifacare.com',
        password: 'test123456',
        full_name: 'مستخدم تجريبي',
        role: 'admin',
        permissions: {
          manage_users: true,
          manage_patients: true,
          manage_sessions: true,
          view_reports: true,
          manage_settings: true,
          manage_finances: true,
          manage_facility: true,
          manage_rooms: true
        },
        is_active: true,
        created_at: new Date().toISOString()
      }
    ];
    
    localStorage.setItem('shifa_users', JSON.stringify(defaultUsers));
    return defaultUsers;
  }

  private loadCurrentUser() {
    const user = localStorage.getItem('shifa_current_user');
    return user ? JSON.parse(user) : null;
  }

  private saveCurrentUser(user: any) {
    if (user) {
      localStorage.setItem('shifa_current_user', JSON.stringify(user));
    } else {
      localStorage.removeItem('shifa_current_user');
    }
    this.currentUser = user;
  }

  async signInWithPassword(credentials: { email: string; password: string }) {
    const user = this.users.find(u => 
      u.email === credentials.email && u.password === credentials.password && u.is_active
    );

    if (user) {
      const userWithoutPassword = { ...user };
      delete userWithoutPassword.password;
      this.saveCurrentUser(userWithoutPassword);
      
      return {
        data: { user: userWithoutPassword },
        error: null
      };
    } else {
      return {
        data: { user: null },
        error: { message: 'بيانات الدخول غير صحيحة' }
      };
    }
  }

  async signUp(credentials: { email: string; password: string; options?: any }) {
    const existingUser = this.users.find(u => u.email === credentials.email);
    if (existingUser) {
      return {
        data: { user: null },
        error: { message: 'المستخدم موجود بالفعل' }
      };
    }

    const options = credentials.options || {};
    const userData = options.data || {};

    const newUser = {
      id: Date.now().toString(),
      email: credentials.email,
      password: credentials.password,
      full_name: userData.full_name || 'مستخدم جديد',
      role: userData.role || 'therapist',
      permissions: userData.permissions || {},
      is_active: true,
      created_at: new Date().toISOString()
    };

    this.users.push(newUser);
    localStorage.setItem('shifa_users', JSON.stringify(this.users));

    const userWithoutPassword = { ...newUser };
    delete userWithoutPassword.password;
    this.saveCurrentUser(userWithoutPassword);

    return {
      data: { user: userWithoutPassword },
      error: null
    };
  }

  async signOut() {
    this.saveCurrentUser(null);
    return { error: null };
  }

  async getSession() {
    return {
      data: {
        session: this.currentUser ? {
          user: this.currentUser,
          access_token: 'local_token',
          refresh_token: 'local_refresh_token'
        } : null
      }
    };
  }

  onAuthStateChange(callback: (event: string, session: any) => void) {
    const checkAuth = () => {
      const currentUser = this.loadCurrentUser();
      if (currentUser) {
        callback('SIGNED_IN', { user: currentUser });
      } else {
        callback('SIGNED_OUT', { user: null });
      }
    };

    const interval = setInterval(checkAuth, 1000);
    checkAuth(); // فحص فوري

    return {
      data: {
        subscription: {
          unsubscribe: () => clearInterval(interval)
        }
      }
    };
  }

  // محاكاة جدول profiles
  from(table: string) {
    if (table === 'profiles') {
      return {
        select: (columns: string) => ({
          eq: (column: string, value: any) => ({
            single: async () => {
              if (column === 'id' && this.currentUser) {
                return { data: this.currentUser, error: null };
              }
              return { data: null, error: { message: 'لا يوجد بيانات' } };
            }
          }),
          limit: async (count: number) => {
            const users = this.users.map(user => {
              const userWithoutPassword = { ...user };
              delete userWithoutPassword.password;
              return userWithoutPassword;
            });
            return { data: users.slice(0, count), error: null };
          }
        }),
        upsert: async (data: any) => {
          const userIndex = this.users.findIndex(u => u.id === data.id);
          if (userIndex !== -1) {
            this.users[userIndex] = { ...this.users[userIndex], ...data };
          } else {
            this.users.push(data);
          }
          localStorage.setItem('shifa_users', JSON.stringify(this.users));
          return { data, error: null };
        }
      };
    }
    
    // محاكاة جداول أخرى
    return {
      select: () => ({
        limit: async () => ({ data: [], error: null })
      }),
      insert: async () => ({ data: null, error: null }),
      update: async () => ({ data: null, error: null }),
      delete: async () => ({ data: null, error: null })
    };
  }
}

// إنشاء نسخة من المصادقة المحلية
const localAuth = new LocalAuth();

// دالة للتحقق من الاتصال بـ Supabase
async function checkSupabaseConnection() {
  try {
    const { data, error } = await supabaseClient.from('profiles').select('count').limit(1);
    return !error;
  } catch (error) {
    console.warn('⚠️ مشكلة في الاتصال بـ Supabase، سيتم استخدام المصادقة المحلية');
    return false;
  }
}

// تصدير client محسن يدعم كلا النظامين
export const supabase = {
  auth: {
    signInWithPassword: async (credentials: any) => {
      const isConnected = await checkSupabaseConnection();
      if (isConnected) {
        return await supabaseClient.auth.signInWithPassword(credentials);
      } else {
        return await localAuth.signInWithPassword(credentials);
      }
    },
    signUp: async (credentials: any) => {
      const isConnected = await checkSupabaseConnection();
      if (isConnected) {
        return await supabaseClient.auth.signUp(credentials);
      } else {
        return await localAuth.signUp(credentials);
      }
    },
    signOut: async () => {
      const isConnected = await checkSupabaseConnection();
      if (isConnected) {
        return await supabaseClient.auth.signOut();
      } else {
        return await localAuth.signOut();
      }
    },
    getSession: async () => {
      const isConnected = await checkSupabaseConnection();
      if (isConnected) {
        return await supabaseClient.auth.getSession();
      } else {
        return await localAuth.getSession();
      }
    },
    onAuthStateChange: (callback: any) => {
      // محاولة استخدام Supabase أولاً
      try {
        return supabaseClient.auth.onAuthStateChange(callback);
      } catch (error) {
        console.warn('استخدام المصادقة المحلية');
        return localAuth.onAuthStateChange(callback);
      }
    }
  },
  from: (table: string) => {
    // محاولة استخدام Supabase أولاً
    try {
      return supabaseClient.from(table);
    } catch (error) {
      console.warn('استخدام التخزين المحلي');
      return localAuth.from(table);
    }
  }
};

// بيانات الدخول الافتراضية
console.log('🔐 نظام المصادقة جاهز!');
console.log('📧 بيانات الدخول الافتراضية:');
console.log('   - admin@shifacare.com / admin123');
console.log('   - test@shifacare.com / test123456');